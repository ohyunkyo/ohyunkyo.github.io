{"version":3,"file":"component---src-pages-index-js-999dc5a197a6c5db4ccf.js","mappings":"uJAyCA,IAtCe,WACb,IAAQA,GAAsBC,EAAAA,EAAAA,gBAAe,cAArCD,kBAcFE,EAAc,IAAIC,IAExBH,EAAkBI,MAAMC,SAAQ,YAEzB,IADLC,EACI,EADJA,OAEIA,GAAUA,EAAOC,UACnBL,EAAYM,IAAIF,EAAOC,aAI3B,IAAME,EAAcC,MAAMC,KAAKT,GAE/B,OACE,uBAAKU,MAAM,WAAX,oBAEGH,EAAYI,KAAI,SAAAN,GACf,OAAO,4BAAM,gBAAC,EAAAO,KAAD,CAAMC,GAAE,aAAeR,GAAaA,GAA1C,c,sDCqBf,IA5CY,WAAO,IAAD,IACVS,GAAOf,EAAAA,EAAAA,gBAAe,aAiBtBgB,EAAM,UAAGD,EAAKE,KAAKC,oBAAb,aAAG,EAAwBF,OACjCG,EAAM,UAAGJ,EAAKE,KAAKC,oBAAb,aAAG,EAAwBC,OAEvC,OACE,uBAAKC,UAAU,OACb,gBAAC,EAAAC,EAAD,CACED,UAAU,aACVE,OAAO,QACPC,QAAS,CAAC,OAAQ,OAAQ,QAC1BC,IAAI,uDACJC,MAAO,IACPC,OAAQ,IACRC,QAAS,GACTC,IAAI,kBARN,uBAUCZ,MAAAA,OAAA,EAAAA,EAAQa,OACP,yBACE,8BAASb,EAAOa,MAAc,4BAC7Bb,MAAAA,OAAA,EAAAA,EAAQc,UAAW,KAAK,2BAAM,2BAFjC,QAGO,qBAAGC,KAAI,wBAAwBZ,MAAAA,OAAA,EAAAA,EAAQa,SAAR,KAA/B,gB,2FCoBf,UA5DkB,SAAC,GAAwB,IAAD,EAArBjB,EAAqB,EAArBA,KAAMkB,EAAe,EAAfA,SACnBC,GAAY,UAAAnB,EAAKE,KAAKC,oBAAV,eAAwBiB,QAAxB,QACZC,EAAQrB,EAAKhB,kBAAkBI,MAErC,OAAqB,IAAjBiC,EAAMC,OAEN,gBAAC,IAAD,CAAQJ,SAAUA,EAAUE,MAAOD,GACjC,gBAAC,IAAD,CAAKC,MAAM,WACX,gBAAC,IAAD,MACA,gBAAC,IAAD,MACA,uLAUJ,gBAAC,IAAD,CAAQF,SAAUA,EAAUE,MAAOD,GACjC,gBAAC,IAAD,CAAKC,MAAM,WACX,gBAAC,IAAD,MACA,gBAAC,IAAD,MACA,sBAAIG,MAAO,CAAEC,UAAU,SACpBH,EAAMxB,KAAI,SAAA4B,GACT,IAAML,EAAQK,EAAKC,YAAYN,OAASK,EAAKnC,OAAOqC,KAEpD,OACE,sBAAIC,IAAKH,EAAKnC,OAAOqC,MACnB,2BACEtB,UAAU,iBACVwB,WAAS,EACTC,SAAS,6BAET,8BACE,0BACE,gBAAC,EAAAhC,KAAD,CAAMC,GAAI0B,EAAKnC,OAAOqC,KAAMI,SAAS,OACnC,wBAAMA,SAAS,YAAYX,KAG/B,6BAAQK,EAAKC,YAAYM,OAE3B,+BACE,qBACEC,wBAAyB,CACvBC,OAAQT,EAAKC,YAAYS,aAAeV,EAAKW,SAE/CL,SAAS,0B","sources":["webpack://gatsby-starter-blog/./src/components/NavBar.js","webpack://gatsby-starter-blog/./src/components/bio.js","webpack://gatsby-starter-blog/./src/pages/index.js"],"sourcesContent":["import * as React from \"react\"\r\nimport { Link, graphql, useStaticQuery} from \"gatsby\"\r\n\r\nconst NavBar = () => {\r\n  const { allMarkdownRemark } = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        allMarkdownRemark {\r\n          nodes {\r\n            fields {\r\n              category\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `\r\n  )\r\n\r\n  const categorySet = new Set();\r\n\r\n  allMarkdownRemark.nodes.forEach(({\r\n    fields\r\n  }) => {\r\n    if (fields && fields.category) {\r\n      categorySet.add(fields.category);\r\n    }\r\n  });\r\n\r\n  const categoryArr = Array.from(categorySet)\r\n\r\n  return (\r\n    <div class=\"nav-bar\">\r\n      Categories : &nbsp;&nbsp;&nbsp;&nbsp;\r\n      {categoryArr.map(category => {\r\n        return <span><Link to={`/category/${category}`}>{category}</Link>&nbsp;&nbsp;&nbsp;&nbsp;</span>\r\n      })}\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default NavBar","/**\r\n * Bio component that queries for data\r\n * with Gatsby's useStaticQuery component\r\n *\r\n * See: https://www.gatsbyjs.com/docs/use-static-query/\r\n */\r\n\r\nimport * as React from \"react\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\nimport { StaticImage } from \"gatsby-plugin-image\"\r\n\r\nconst Bio = () => {\r\n  const data = useStaticQuery(graphql`\r\n    query BioQuery {\r\n      site {\r\n        siteMetadata {\r\n          author {\r\n            name\r\n            summary\r\n          }\r\n          social {\r\n            github\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\r\n  const author = data.site.siteMetadata?.author\r\n  const social = data.site.siteMetadata?.social\r\n\r\n  return (\r\n    <div className=\"bio\">\r\n      <StaticImage\r\n        className=\"bio-avatar\"\r\n        layout=\"fixed\"\r\n        formats={[\"auto\", \"webp\", \"avif\"]}\r\n        src=\"https://avatars.githubusercontent.com/u/53898395?v=4\"\r\n        width={110}\r\n        height={110}\r\n        quality={95}\r\n        alt=\"Profile picture\"\r\n      />\r\n      {author?.name && (\r\n        <p>\r\n          <strong>{author.name}</strong><br />\r\n          {author?.summary || null}<br /><br />\r\n          깃허브: <a href={`https://github.com/${social?.github || ``}`}>ohyunkyo</a>\r\n        </p>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Bio\r\n","import * as React from \"react\"\r\nimport { Link, graphql } from \"gatsby\"\r\n\r\nimport NavBar from \"../components/NavBar\"\r\nimport Bio from \"../components/bio\"\r\nimport Layout from \"../components/layout\"\r\nimport Seo from \"../components/seo\"\r\n\r\nconst BlogIndex = ({ data, location }) => {\r\n  const siteTitle = data.site.siteMetadata?.title || `Title`\r\n  const posts = data.allMarkdownRemark.nodes\r\n\r\n  if (posts.length === 0) {\r\n    return (\r\n      <Layout location={location} title={siteTitle}>\r\n        <Seo title=\"모든 게시물\" />\r\n        <NavBar />\r\n        <Bio />\r\n        <p>\r\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\r\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\r\n          gatsby-config.js).\r\n        </p>\r\n      </Layout>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Layout location={location} title={siteTitle}>\r\n      <Seo title=\"모든 게시물\" />\r\n      <NavBar />\r\n      <Bio />\r\n      <ol style={{ listStyle: `none` }}>\r\n        {posts.map(post => {\r\n          const title = post.frontmatter.title || post.fields.slug\r\n\r\n          return (\r\n            <li key={post.fields.slug}>\r\n              <article\r\n                className=\"post-list-item\"\r\n                itemScope\r\n                itemType=\"http://schema.org/Article\"\r\n              >\r\n                <header>\r\n                  <h2>\r\n                    <Link to={post.fields.slug} itemProp=\"url\">\r\n                      <span itemProp=\"headline\">{title}</span>\r\n                    </Link>\r\n                  </h2>\r\n                  <small>{post.frontmatter.date}</small>\r\n                </header>\r\n                <section>\r\n                  <p\r\n                    dangerouslySetInnerHTML={{\r\n                      __html: post.frontmatter.description || post.excerpt,\r\n                    }}\r\n                    itemProp=\"description\"\r\n                  />\r\n                </section>\r\n              </article>\r\n            </li>\r\n          )\r\n        })}\r\n      </ol>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default BlogIndex\r\n\r\nexport const pageQuery = graphql`\r\n  query {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\r\n      nodes {\r\n        excerpt\r\n        fields {\r\n          slug\r\n        }\r\n        frontmatter {\r\n          date(formatString: \"MMMM DD, YYYY\")\r\n          title\r\n          description\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"names":["allMarkdownRemark","useStaticQuery","categorySet","Set","nodes","forEach","fields","category","add","categoryArr","Array","from","class","map","Link","to","data","author","site","siteMetadata","social","className","S","layout","formats","src","width","height","quality","alt","name","summary","href","github","location","siteTitle","title","posts","length","style","listStyle","post","frontmatter","slug","key","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","description","excerpt"],"sourceRoot":""}