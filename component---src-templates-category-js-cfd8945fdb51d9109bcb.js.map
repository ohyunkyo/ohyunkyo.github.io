{"version":3,"file":"component---src-templates-category-js-cfd8945fdb51d9109bcb.js","mappings":"uJAyCA,IAtCe,WACb,IAAQA,GAAsBC,EAAAA,EAAAA,gBAAe,cAArCD,kBAcFE,EAAc,IAAIC,IAExBH,EAAkBI,MAAMC,SAAQ,YAEzB,IADLC,EACI,EADJA,OAEIA,GAAUA,EAAOC,UACnBL,EAAYM,IAAIF,EAAOC,aAI3B,IAAME,EAAcC,MAAMC,KAAKT,GAE/B,OACE,yCAEGO,EAAYG,KAAI,SAAAL,GACf,OAAO,4BAAM,gBAAC,EAAAM,KAAD,CAAMC,GAAE,aAAeP,GAAaA,GAA1C,c,uHCEf,EAjCsB,SAAC,GAAsC,IAApCQ,EAAmC,EAAnCA,YAAaT,EAAsB,EAAtBA,OAAQU,EAAc,EAAdA,QACtCC,EAAQF,EAAYE,OAASX,EAAOY,KAE1C,OACE,sBAAIC,MAAO,CAAEC,UAAU,SACrB,sBAAIC,IAAKf,EAAOY,MACd,2BACEI,UAAU,iBACVC,WAAS,EACTC,SAAS,6BAET,8BACE,0BACE,gBAAC,EAAAX,KAAD,CAAMC,GAAIR,EAAOY,KAAMO,SAAS,OAC9B,wBAAMA,SAAS,YAAYR,KAG/B,6BAAQF,EAAYW,OAEtB,+BACE,qBACEC,wBAAyB,CACvBC,OAAQb,EAAYc,aAAeb,GAErCS,SAAS,qBClBvB,EANkB,SAAC,GACjB,OADmC,EAAhBK,UACFlB,KAAI,YAAe,IAAZmB,EAAW,EAAXA,KACtB,OAAO,gBAAC,EAAD,eAAeV,IAAKU,EAAKzB,OAAOY,MAAUa,QCwDrD,EApDyB,SAAC,GAAqC,IAAD,EAAlCC,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KACzC3B,EAAa0B,EAAb1B,SACF4B,GAAY,UAAAD,EAAKE,KAAKC,oBAAV,eAAwBpB,QAAxB,QAElB,OACE,gBAAC,IAAD,CAAQe,SAAUA,EAAUf,MAAOkB,GACjC,gBAAC,IAAD,CAAKlB,MAAK,IAAMV,EAAN,cACV,gBAAC+B,EAAA,EAAD,MACA,2BACEhB,UAAU,YACVC,WAAS,EACTC,SAAS,6BAET,8BACE,sBAAIC,SAAS,YAAb,aAAmClB,IAErC,gBAAC,EAAD,CAAWuB,UAAWI,EAAKlC,kBAAkBuC","sources":["webpack://gatsby-starter-blog/./src/components/NavBar.js","webpack://gatsby-starter-blog/./src/components/PostsListCard.js","webpack://gatsby-starter-blog/./src/components/PostsList.js","webpack://gatsby-starter-blog/./src/templates/category.js"],"sourcesContent":["import * as React from \"react\"\r\nimport { Link, graphql, useStaticQuery} from \"gatsby\"\r\n\r\nconst NavBar = () => {\r\n  const { allMarkdownRemark } = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        allMarkdownRemark {\r\n          nodes {\r\n            fields {\r\n              category\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `\r\n  )\r\n\r\n  const categorySet = new Set();\r\n\r\n  allMarkdownRemark.nodes.forEach(({\r\n    fields\r\n  }) => {\r\n    if (fields && fields.category) {\r\n      categorySet.add(fields.category);\r\n    }\r\n  });\r\n\r\n  const categoryArr = Array.from(categorySet)\r\n\r\n  return (\r\n    <div>\r\n      카테고리 : &nbsp;&nbsp;&nbsp;&nbsp;\r\n      {categoryArr.map(category => {\r\n        return <span><Link to={`/category/${category}`}>{category}</Link>&nbsp;&nbsp;&nbsp;&nbsp;</span>\r\n      })}\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default NavBar","import React from \"react\"\r\nimport { Link } from \"gatsby\"\r\n\r\nconst PostsListCard = ({ frontmatter, fields, excerpt }) => {\r\n  const title = frontmatter.title || fields.slug\r\n\r\n  return (\r\n    <ol style={{ listStyle: `none` }}>\r\n      <li key={fields.slug}>\r\n        <article\r\n          className=\"post-list-item\"\r\n          itemScope\r\n          itemType=\"http://schema.org/Article\"\r\n        >\r\n          <header>\r\n            <h2>\r\n              <Link to={fields.slug} itemProp=\"url\">\r\n                <span itemProp=\"headline\">{title}</span>\r\n              </Link>\r\n            </h2>\r\n            <small>{frontmatter.date}</small>\r\n          </header>\r\n          <section>\r\n            <p\r\n              dangerouslySetInnerHTML={{\r\n                __html: frontmatter.description || excerpt,\r\n              }}\r\n              itemProp=\"description\"\r\n            />\r\n          </section>\r\n        </article>\r\n      </li>\r\n    </ol>\r\n  )\r\n}\r\n\r\nexport default PostsListCard","import React from \"react\"\r\nimport PostsListCard from \"./PostsListCard\"\r\n\r\nconst PostsList = ({ postEdges }) => {\r\n  return postEdges.map(({ node }) => {\r\n    return <PostsListCard key={node.fields.slug} {...node} />\r\n  })\r\n}\r\n\r\nexport default PostsList","import React from \"react\"\r\nimport { graphql } from \"gatsby\"\r\nimport { Container } from \"react-bootstrap\"\r\n\r\nimport NavBar from \"../components/NavBar\"\r\nimport Layout from \"../components/layout\"\r\nimport Seo from \"../components/seo\"\r\nimport PostsList from \"../components/PostsList\"\r\n\r\nconst CategoryTemplate = ({ location, pageContext, data }) => {\r\n  const { category } = pageContext\r\n  const siteTitle = data.site.siteMetadata?.title || `Title`\r\n\r\n  return (\r\n    <Layout location={location} title={siteTitle}>\r\n      <Seo title={`\"${category}\" 카테고리 목록`} />\r\n      <NavBar />\r\n      <article\r\n        className=\"blog-post\"\r\n        itemScope\r\n        itemType=\"http://schema.org/Article\"\r\n      >\r\n        <header>\r\n          <h1 itemProp=\"headline\">Category: {category}</h1>\r\n        </header>\r\n        <PostsList postEdges={data.allMarkdownRemark.edges} />\r\n      </article>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport const pageQuery = graphql`\r\n  query CategoryPage($category: String) {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n    allMarkdownRemark(\r\n      limit: 1000\r\n      filter: { fields: { category: { eq: $category } } }\r\n    ) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          fields {\r\n            slug\r\n            category\r\n          }\r\n          excerpt\r\n          timeToRead\r\n          frontmatter {\r\n            title\r\n            date(formatString: \"MMMM DD, YYYY\")\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default CategoryTemplate"],"names":["allMarkdownRemark","useStaticQuery","categorySet","Set","nodes","forEach","fields","category","add","categoryArr","Array","from","map","Link","to","frontmatter","excerpt","title","slug","style","listStyle","key","className","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","description","postEdges","node","location","pageContext","data","siteTitle","site","siteMetadata","NavBar","edges"],"sourceRoot":""}